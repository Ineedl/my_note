<thread>
std::thread类
    c++11标准库线程类,用来启动线程,一般一个std::thread对象关联一个正在运行的线程.

    1.建立一个该类并启动一个线程的方法.

        (1)传入函数地址直接建立一个新的线程并调用.
        std::thread t(函数名);
        例:
        void p()
        {
            std::cout<<"hello world\n";
        }
        std::thread t(p);             //创建一个新的线程,并且函数p将被该线程调用
        当然,对于多参函数你也可以这样调用
        void p(int,double,bool)
        std::thread t(p,1,3.14,true);   //thread中使用了多参数模板,你传入再多的参数都可以.但是你必须保证第一个为函数名.


        (2)当然,传入仿函数对象也是可以的
        例:
        class no_true_function
        {
            void operator ()()
            {
                while(1)
                    std::cout<<"hello \n";
            }
        };
        no_true_function obj;
        std::thread my_thread(f);       //这里把obj对象给复制过去了,之后也会调用该仿函数执行任务
        当然 你也可以这样
        std::thread my_thread( (no_true_function()) );
        或
        std::thread my_thread{ (no_true_function()) }; 
        //注意如果不用{} 或是 ()括起来会被当成一个函数声明(返回类型为B类型,
                                                            接受单个参数(参数类型是指向 不接受参数同时返回no_true_function对象的函数 的指针)
                                                    的函数的声明),相当于你传进去的no_true_function()当成了 no_true_function (*p)()
        仿函数对于多参数传入也是支持的.    

        注意,对于thread对象建立后,线程就几乎已经创建了,而不必非要等到调用制定函数或仿函数时再调用.
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        对于std::thread对象如果在创建后没有调用析构函数或是join他或是让他分离,则程序运行时一定会出现一个警告语句到标准输出中
         terminate called without an active exception
        这点请尤为注意,创建线程对象后请join和delete,对于栈上std::thread对象尽量join



        (3)当然,也可以传入类的成员函数和对应的类的指针或类的static函数
        例:
            class B{
            public:
                void do_work()
                {
                    while(1)
                    std::cout<<"do some work!\n";
                }
            };
            B b;
            std::thread t(B::do_work,&b);               //注意传入驱动该成员函数的类的指针或地址.
        不过请注意传入要驱动该成员函数的类的对象的地址,因为非static成员函数隐藏了一个指向调用该成员函数对象的指针参数.
        当然,对于static函数并不需要传入驱动该成员函数的类的对象的地址.


        (4)std::thread对象也可以转移其他线程对象绑定的线程来建立新对象
        对于std::thread对象,其不支持拷贝拷贝构造函数和=重载(只支持移动行为的=重载)等复制行为,这些复制行为都使用c++11的标准被delete了,std::thread对象只支持移动和创建.
        但是其内部有移动构造函数和支持移动的=重载等支持.
        注意转移时请用std::move标记后再进行转移.
        例:
            void commom_threads()
            {
                while(1)
                std::cout<<"I common"<<std::endl;       
            }
            std::thread t(commom_threads);
            std::thread t1(std::move(t));           //t转移给t1
            std::thread t2=std::move(t1);           //t1转移给t2
            std::thread t3=t2;                      //报错,非右值=重载已被delete
            std::thread t4(t2);                     //不报错,但是运行时会直接宕掉,t2已经有关联的线程

        但是在线程转移时,转移后的对象在之前绑定的线程不可以未运行完或是未分离,否则将会程序将会宕掉.
        例:
            void daemon_threads()
            {
                std::cout<<"I will protect"<<std::endl;
                while(1);
            }
            void commom_threads()
            {
                while(1)
                std::cout<<"I common"<<std::endl;       
            }
            void commom_threads2()
            {
                while(1)
                std::cout<<"I common2"<<std::endl;       
            }

            std::thread protect(daemon_threads);
            std::cout<<protect.get_id()<<std::endl;     //可以获得线程标识符
            protect.detach();                           //分离线程
            std::cout<<protect.get_id()<<std::endl;     //提示没有绑定线程
            protect=std::thread(commom_threads);                    //允许操做,因为protect已分离
            protect=std::thread(commom_threads2);                    //宕掉,不允许,因为protect绑定线程未运行完毕

    2.std::thread类常用方法
        detach()        //使该线程对象绑定的线程进入分离态 
                        //线程被分离后该线程将会继续运行,但是会被std::thread对象舍弃但是依旧存在.
        join()          //等待调用该函数的线程对象绑定的线程结束
                        //被分离或已经结束的线程调用会直接宕掉
        joinable()      //返回一个bool值,用来标识该线程对象绑定的线程是否可以join,true为可以.
                        当线程被分离时返回false
        get_id()        //获取std::thread对象关联线程的线程标识符
                        //注意当两个std::thread都无线程关联时他们的get_id()所获得值相同
                        //使用时请考虑线程对象没有关联线程这个情况
        (static)std::thread::hardware_concurrency()     //返回一个对于给定程序执行时能够真正并发运行的线程数量的指示.他可能是cpu核数,只是一个提示,如果无法计算该值则返回0.
        (static)std::this_thread::get_id()              //返回调用该函数线程的线程标识符

    3.对于创建多参数线程,最好在传入的参数中不发生类型转换,因为可能在转换的过程中,建立该线程的那个线程可能已经结束了从而导致对局部变量的未定义行为.
        例:
            class A{};
            class B{
                public:
                    operator A()
                    {
                        for(int i=99999;i>0;i--)
                            for(int i=99999;i>0;i--)
                                for(int i=99999;i>0;i--);
                        return A();
                    }
            };
            void p(A a)
            {
                std::cout<<"p\n";
            }
            int main()
            {
                B b;
                std::thread t4(p,b);                //转换完成前main函数就已经没了,然后全部都没了
                std::cout<<"main die\n";
            }

    4.thread对象会无视函数所期望的类型,对于未包装的数据,一律都是值传递.
        所以对于需要传入引用的函数,必须得用ref()//一般引用
                                        或是
                                        cref()包装
                                        //const引用

    5.std::thread对象的线程标识符是一个类,但是他重载了各种符号使其看上去像是一个值,其也允许被各种容器存储和排序.
        std::thread对象绑定的线程结束或是分离后,其线程标识符将提示其没有执行线程.
        std::thread对象的线程标识符数据类型为std::thread::id,可以使其和各种数据结构组合以来更好的控制线程
    
    6.请注意创建thread对象和创建线程是两码事,创建thread对象的过程中会创建线程,他们并不是同时完成,所以才会发生3中那种情况

互斥锁与数据保护<mutex>
    互斥锁都继承于一个最基本的锁,以免好让一些函数可以通过他们的父类接口来调用他们完成相应功能
	当然,你不用继承而使用组合来持有锁对象也是可以实现新的锁的.
    1.std::mutex类
        c++11标准线程库中的类,用来充当互斥对象来保护共享数据.也是最基本的锁.

    2.锁常用功能
    (1)std::mutex类
         !!!!!!!!!!!!!!!!!!!!!!!!!!!
         该类不支持通过各种手段来转移锁
         !!!!!!!!!!!!!!!!!!!!!!!!!!!
        最常见的锁类型,就是普通的锁一般常用的有
        lock()
        unlock()
        try_lock()三个成员函数

    (2)std::lock_guard类
        该类是一个模板,他可以在构造式锁定所给的互斥元,在析构时解锁,从而保证被锁定的互斥元始终被正确解锁
         !!!!!!!!!!!!!!!!!!!!!!!!!!!
         该类不支持通过各种手段来转移锁
         !!!!!!!!!!!!!!!!!!!!!!!!!!!
        给该类传入锁时都是传入的引用,因此该类和传入的锁是共享状态的
        建立std::lock_guard方法:
            std::lock_guard<锁类型> 变量名(对应锁的对象)		//其中锁类型是指拥有lock()和unlock()成员函数的标准库中的锁或是自定义其他功能的锁(不需要try_lock)
																//注意,此处lock()和unlock()不可以有参数(GCC4.9源码里面调用就是这样的)
            例:
                std::mutex p;
                std::lock_guard<std::mutex> l_g(p);
        
            当然,也可以把已上锁的锁交给刚初始化的lock_guard来管理
            例:
                std::mutex p;
                p.lock();
                std::lock_guard<std::mutex> l_g(p,std::adopt_lock);  //std::adopt_lock表示把上锁的锁交给std::lock_guard对象管理
                                                                     //传入该参数时,std::lock_guard将不会对传入的锁上锁
                                                                     //该锁不需要也不可以使用std::defer_lock参数,因为该锁无法使用unlock(),所以用该参数无意义
    (3)std::unique_lock类
        该类是一个模板,他可以在构造式锁定所给的互斥元,在析构时解锁,从而保证被锁定的互斥元始终被正确解锁
         该锁在默认情况下的使用等同于std::lock_guard类,但是其占用资源大于std::lock_guard类
          !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          该类只支持移动构造来转移锁的所有权
          !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         给该类传入锁时都是传入的引用,因此该类和传入的锁是共享状态的
        std::unique_lock类允许使用一个owns_lock()函数来查看其内部锁是否上锁
            当内部锁上锁时,析构std::unique_lock时会调用unlock(),否则将不会调用.
        建立std::unique_lock方法:
            std::unique_lock<锁类型> 变量名(对应锁的对象)		//其中锁类型是指拥有lock()和unlock()还有try_lock()成员函数的标准库中的锁或是自定义其他功能的锁
																//注意,此处lock()和unlock()还有try_lock()不可以有参数(GCC4.9源码里面调用就是这样的),且try_lock()需要有一个bool返回值
        例:
                std::mutex p;
                std::unique_lock<std::mutex> l_g(p);
        
            当然,也可以把已上锁的锁交给刚初始化的lock_guard来管理
            例:
                std::mutex p;
                p.lock();
                std::unique_lock<std::mutex> l_g(p,std::adopt_lock);  //std::adopt_lock表示把上锁的锁交给std::lock_guard对象管理,
                                                                     //传入该参数时,std::adopt_lock将不会对传入的锁上锁

            也可以在一开始就声明传入的锁不上锁
                std::mutex p;
                std::unique_lock<std::mutex> l_g(p,std::defer_lock);    //std::defer_lock表示该互斥单元在传入std::unique_lock时必须未上锁,
                                                                        //std::unqiue_lock在构造后也不会对传入锁上锁 
            
            也可以在一开始让他自己查看是否该锁已上锁
                std::mutex p;
                std::unique_lock<std::mutex> l_g(p,std::try_to_lock);   //如果锁之前上锁了,则相当于std::adopt_lock,否则相当于std::defer_lock
        
        注意unique_lock锁在销毁时不是查看锁的上锁次数是1和0而是查看锁有没有上过锁,所以对于和std::recursive_mutex配合使用必须小心.
                                    
    (4)std::recursive_mutex类
        递归锁
        该类同std::mutex但是其在被一个线程获得时,该线程可以对该锁获得多次,但是相对的,再释放该锁时,该线程也必须同样unlock多次,否则另外一个线程无法获取该锁
        例:
        void p(std::recursive_mutex& m)
        {
            m.lock();                   //创建t后将在此处卡住,递归锁并只是拿取他的线程可以对他进行多次获取.
            //do_something
            m.unlock();
        }
        std::recursive_mutex rm;
        rm.lock();
        rm.lock();
        rm.lock();
        std::thread t(p,ref(rm));       //该线程无法获取该锁,除非该锁之前的三次lock已经被上锁的线程3次解锁.
    
    注意:
        递归锁对于std::lock_guard  
            在用递归锁构造std::lock_guard时,使用std::adopt_lock将继承该线程对该递归锁的获取次数,std::lock_guard对象销毁时,也只是对其获取次数-1
                                           不使用std::adopt_lock时,销毁和构造std::lock_guard对象只是单纯的事该线程对该锁的获取次数+1和-1
        递归锁对于std::unique_lock
             在用递归锁构造std::unique_lock时,使用std::adopt_lock时,将继承该线程对该递归锁的获取次数,std::lock_guard对象销毁时,也只是对其获取次数-1
                                                在5.1源码中使用std::adopt_lock时std::unique_lock会在销毁时对判断标志置true并且调用unlock()
                                             使用std::defer_lock时,将在销毁std::unique_lock对象时不会对锁进行任何的unlock操作,
                                                例:
                                                    void p(std::recursive_mutex& m)
                                                    {
                                                        m.lock();                   //程序会卡在这里,因为下方unique_lock锁将不会在销毁时在内部释放一次锁.但是
                                                        std::cout<<"p\n";           //unique_lock锁在销毁时不是查看锁的上锁次数是1和0而是查看锁有没有上过锁
                                                        m.unlock();
                                                    }
                                                    int main()
                                                    {
                                                        std::recursive_mutex rm;
                                                        rm.lock();
                                                        rm.lock();
                                                        std::unique_lock<std::recursive_mutex> *lg=new std::unique_lock<std::recursive_mutex>(rm,std::defer_lock);
                                                        std::cout<<"create ok\n";
                                                        delete lg;
                                                        std::thread t(p,ref(rm));
                                                        t.join();

                                                            std::cout<<"main\n";
                                                    }
                                                不使用任何参数时,销毁和构造std::lock_guard对象只是单纯的事该线程对该锁的获取次数+1和-1
    
    3.call_once函数
        call_once保证此处语句只被执行一次，如果有多个线程同时执行此处语句，
         则只有一个活动线程(active call)会执行函数，
          其他的线程在这个线程执行返回之前会处于”passive execution”(被动执行状态)——不会直接返回，
           直到活动线程对fn调用结束才返回。对于所有调用函数fn的并发线程，数据可见性都是同步的(一致的)。
        如果活动线程在执行fn时抛出异常，则会从处于”passive execution”状态的线程中挑一个线程成为活动线程继续执行fn，依此类推。
         一旦活动线程返回，所有”passive execution”状态的线程也返回,不会成为活动线程。
          (实际上once_flag相当于一个锁，使用它的线程都会在上面等待，只有一个线程允许执行。如果该线程抛出异常，那么从等待中的线程中选择一个，重复上面的流程)。
        
        call_once用一个std::once_flag对象来标记一些线程同步,类似于linux中的线程同步的屏障
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        注意std::once_flag不允许移动和复制(无移动构造函数和拷贝构造函数以及对应的=重载)
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        例:
            static std::once_flag p;
            static std::once_flag p2;
            void do_mission(int a);
            void do_mission2(floa b);
            void mission(){
                    call_once(p,do_mission1,156);           //所有线程都会在这里阻塞直到其中某个线程完成do_mission1任务
                    .....
                    call_once(p2,do_mission2,3.1415926);    //所有线程都会在这里阻塞直到其中某个线程完成do_mission2任务
            }
        call_once只适合多个线程调用同一处代码的场景.
        若std::once_flag标记被多个call_once传入函数,则一个标记会保证这些函数中只有一个被调用.
        例:
            std::once_flag once;
            void p5()
            {
                std::cout<<"p5"<<std::endl;
            }
            void p4()
            {
                std::cout<<"p4"<<std::endl;
            }
            void p2()
            {
                std::cout<<"p2"<<std::endl;
            }
            void p3()
            {
                std::call_once(once,p4);
            }
            void p()
            {
                    std::call_once(once,p2);
            }

            int main()
            {
                std::thread* t2=new std::thread(p);
                std::thread* t1=new std::thread(p3);
                
                std::call_once(once,p5);                //p2,p4,p5中的一个被执行完前三个线程都会卡在call_once处

                for(int i=0;i<99999;i++);
                std::cout<<"ok"<<std::endl;
            }
            上述例子中一个once_flag变量保证p4,p2,p5中只有一个会被调用,
                call_once在多个线程执行一处代码的场景保证那些线程环境中那个函数只会被执行一次,且执行完前的运行到call_once处的函数会被阻塞
                call_once在多个线程执行多处代码的场景中使用时,他会保证不同处的函数中只有一个会被调用.且等那个函数调用完前所有线程都会在同一标识的call_once处阻塞.


	
	3.锁常用函数
		全局的std::lock()
			锁住多个变量,传入参数数量必须大于2
				注意如果多个位置传入相同的锁变量时将会100%直接造成调用线程自己死锁(至于其他线程得看锁住的锁是否会被其他线程上锁).
				 同时锁定后再次调用对应锁对象的lock()函数时也可能造成死锁(取决于某些情况).
				例1:
					std::mutex a;
					std::lock(a,a);			//单线程产生死锁,本线程瘫痪(即单线程一直等待)
				
				例2:
					std::mutex a;
					std::mutex b;
					std::lock(a,b);
					a.lock();				//调用lock全局函数后传入的变量已经上锁,如果未解锁且其他线程中不会解除该锁,
											//在该线程中再次上锁时会造成单线程死锁(即单线程一直等待).
		每种锁的成员函数lock()和unlock和try_lock或常用函数
			std::mutex:	
                        void lock()		单纯的上锁
						void unlock()	单纯的解锁
                        bool try_lock()  尝试上锁,返回一个bool,true为上锁成功,false为无法上锁.但是try_lock()就算可以他也并不会上锁
            
            std::lock_guard:    无可用成员函数,该锁的存在就是为了使用RAII管理锁
                                    
            std::unique_lock:
                        owns_lock()     查看其内部的锁是否上锁.
                                        返回一个bool值,1为已经上锁,0为未上锁,本质是使用try_lock()
                        void lock()		单纯的上锁
						void unlock()	单纯的解锁
                        bool try_lock()  尝试上锁,返回一个bool,true为上锁成功,false为无法上锁.但是try_lock()就算可以他也并不会上锁
        
        call_once():
                    template <class Fn, class... Args>
                    void call_once (once_flag& flag, Fn&& fn, Args&&...args);
                        该函数使用多参模板,除了第一个必须传入std::once_flag用来同步一部分线程以外,后面紧跟着的就是函数和其对应参数. 


对于支持c++11的编译器,多个线程在同一函数中的static变量的初始化是线程安全的,若多个线程同时第一次初始化该static变量
 则所有线程都会在那处等待直到某个线程完成该static变量的初始化.
    例:
        class my_class;
        myclass& get_my_class_instance()
        {
            static my_class instance;       //就算有多个线程,初始化该变量也是线程安全的.
            return instance;
        }


					
			
