c11特性
	1.删除函数和默认函数
	可以使用delete来显式禁止某些操作符(比如+ =的重载和new符号),还可以来禁止编译器生成析构函数,拷贝构造函数等函数
		{
		void *operator new(size_t) = delete;		//全局new符号禁用
		void *operator new[](size_t) = delete;		//全局new数组符号禁用
		
		X3& operator = (const X3 &) = delete;		//X3的=重载禁用
		X3(const X3&) = delete;						//X3的拷贝构造函数禁用
		}
	也可以用delete来避免一些期望转换例如
	{
		class X4
		{
		public:
			X4(double){}
			X4(int) = delete;
		};
		private:
			void int max(int a,int b);
			void int max(double a,double b)=delete;		//禁止max的double重载,同时禁止了向max函数传递double参数
	
	}
	如果程序员没有显式地为一个类定义某个特殊成员函数,而又需要用到该特殊成员函数时,则编译器会隐式的为这个类生成一个默认的特殊成员函数
	可以使用default,编译器将为显式声明的 default函数自动生成函数体,用default声明的函数比用户自己定义的默认构造函数获得更高的代码效率.
	default函数特性仅适用于类的特殊成员函数，且该特殊成员函数没有默认参数
	例:
	class X1
	{
	public:
		X() = default; //可以通过,该函数比用户自己定义的默认构造函数获得更高的代码效率
		int f() = default;      // err , 函数 f() 非类 X 的特殊成员函数
		X1(int, int) = default;  // err , 构造函数 X1(int, int) 非 X 的特殊成员函数
		X1(int = 1) = default;   // err , 默认构造函数 X1(int=1) 含有默认参数
	};
	
	
	
	3.移动和右值引用
	左值引用和右值引用
	左值和右值的分类标准:对他们取地址,如果能，就是左值；否则，就是右值。
	左值:一般放在赋值符号=的左边变量或对象(该对象或变量必须具有存储空间,而且用户可以区改变该对象或变量的内容)
	右值:只能对放在赋值符号=的右边常量或者表达式,该常量或表达式具有下面括号中的特性<------------------------------------------------
	左值引用是指对可以放在赋值符号=的左边或右边变量进行创建引用.(被引用的对象必须是有存储空间的变量或对象)                         |
	右值引用是指只能对放在赋值符号=的右边常量或者表达式进行创建引用,其最后结果一定要是一个进行创建引用.                            |
	(被引用的常量必须为一个常量(常变量不行(也不能是常变量的引用),必须是数值或者字符等已经决定好了的东西,这个东西必须是一开始就有,而且没有经过初始化))
	(被引用的表达式必须要最后能获得一个上述意义的常量)
	(右值引用不能绑定右值引用)
	(右值一般时一个亡值,一个临时的值,在下个语句执行时就会不存在的东西)
	例:创建右值引用
		int&& i=1;	
	例外:把右值绑定到左值引用上
		const int &i=1;
	移动:一般函数传入参数
	
	移动:
	在函数间创建同种对象时,可以使用原来不需要了的空间中的资源(分配的堆空间等),抛弃了以前创建同种对象需要拷贝的操作,可以提升部分程序性能.
	移动构造函数
	T(T&& t)
	通过传入一个右值,因为右值一般有将亡,临时的特性,可以对其随意修改,默认的构造函数中需要加const类型来防止某些不安全的操作和错误,但是右值一般不会存在该问题
	在移动构造函数通过某些操作来使新的对象直接使用t的一些空间来避免不必要的内存拷贝,提升了程序的性能,而且函数也会因为其是右值,而不会分配形参的空间,虽然左值引用也是这样.
	也可以自己编写一些函数来进行这种操作
	普通对象和普通变量的右边值转换		//被转换成右值后,就说明了你将在不使用他,而他的内存将被被的变量直接使用.这个和引用的意义不一样.
	std::move(对象名);
	static_cast<类型名&&>(变量名);
	注意在把变量转成右值后,最好不要使用和修改其内容,因为右值一般时被当作一个亡值,一个临时的值,在下个语句执行时就会不存在的东西.
	
	(函数的返回值算一种右值)
	例子:
	void f(std::thread t);					
	void g()
	{
		void some_function();
		f(std::thread(some_function));		//这里std::thread()返回一个右值作为f函数的参数
		std::thread t(some_function);
		f(std::move(t));					//这里调用std::move()函数,将t声明为一个右值,并且可能要之后在f中传递,修改t的值
	}
	
	注意,移动构造函数继承的只是空间和该空间内的值，该空间内指针仍然也只是引用。
	
	4.nullptr
		使用需要<cstdlib>头文件
		
	NULL在C++中被明确定义为整数0
	NULL定义如下
	/* Define NULL pointer value */
	#ifndef NULL
		#ifdef __cplusplus					//c++	
			#define NULL    0
		#else  								//c语言定义
			#define NULL    ((void *)0)
		#endif  
	#endif  
	
	对于c++中的函数重载，由于NULL的定义
	A::P(int)
	A::P(char*)
	当传入NULL时,可能会进入A::P(int)而不是A::(char*)
	为了解决这个问题c++11引入了nullptr
	
	nullptr关键字用于标识空指针，是std::nullptr_t类型的（constexpr）变量。
	它可以转换成任何指针类型和bool布尔类型（主要是为了兼容普通指针可以作为条件判断语句的写法），但是不能被转换为整数。
	
	5.不定参数数量的模板,同不定参数函数
	先省略
	
	
	
	
	6.auto类型
		auto的原理就是根据后面的值，来自己推测前面的类型是什么。
		auto的作用就是为了简化变量初始化，如果这个变量有一个很长很长的初始化类型，就可以用auto代替。
		auto无法单独存在,auto变量必须是一开始就被其他的变量或数据赋值.
		例:
			auto i;	//报错,auto变量必须是右值承受者或变量的承受着.
			auto i=1;	//正确
		auto在STL里面经常用来接受不知名的迭代器
		
		特别注意,C98中auto表示声明为自动变量(栈上变量)
		
	7.右值标记函数和左值标记成员函数
		总所周知,成员函数在后面加上const可以表示常成员函数,左值和右值标记函数也是如此
		class A
		{
			public:
				A(){}
				void p() &;
				void p() &&;
				void p() const &;
				void p() const &&;
				void p();
				void p() const;
		};
		注意 上述的6种重载方式不能6个同时共存 

		void p() &;			表示该函数只能被左值调用(临时对象不可)
		void p() &&;		表示该函数只能被右值调用(只可以是临时对象)
		void p() const &;	表示该函数只能被const对应类型的左值调用(临时对象不可)
		void p() const &&;	表示该函数只能被const对应类型的右值调用(好像并没有这种东西,但是无void p() &&;时右值依旧可以调用该函数)
			void p() const &&;		//这个函数貌似没有意义
				当然你可以这样玩	static_cast<const A&&>(A()).p();	//void p() const &&;和void p() &&;都存在时优先调用void p() const &&;
				
		void p();			可以被左值或右值调用
		void p() const;		可以被const的左值或右值调用,也可以被一般的左值和右值调用
			该重载的右值调用版本也一般是这种	static_cast<const A&>(A()).p();	
			
		void p();相当于内容相同的     void p() &;和 
									  void p() &&;一起工作
		void p() const;	相当于内容相同的 void p() const &;和
										 void p() const &&;一起工作
										 同时他在对应的非const函数不再时,也可以被非const标记的左值或右值调用.
		注意有p()或p() const 存在时,将不允许另外4个中的任意一个存在,可以看作另外四个是p()和p() const的功能细化版本
			故要么直接全部细化,要么就用粗略版本
	
	8.decltype
		decltype 是 C++11 新增的一个关键字，它和 auto 的功能一样，都用来在编译时期进行自动类型推导
		auto 要求变量必须初始化,而 decltype 不要求.这很容易理解,auto 是根据变量的初始值来推导出变量类型的,如果不初始化,变量的类型也就无法推导了.
		decltype 可以写成下面的形式：
			decltype(exp) varname;
			 exp 注意事项
			 原则上讲,exp 就是一个普通的表达式,它可以是任意复杂的形式(包括放入带有函数的计算式子,当然你也可以放入重载了各种符号的类和结构体),
			  但是我们必须要保证 exp 的结果是有类型的,不能是 void
			  例如,当 exp 调用一个返回值类型为 void 的函数时,exp 的结果也是 void 类型,此时就会导致编译错误
				可以是指针类型,包括void*指针,但是void类型的确是对于返回值来讲无法意义.
				int a = 0;
				decltype(a) b = 1;  //b 被推导成了 int
				decltype(10.8) x = 5.5;  //x 被推导成了 double
				decltype(x + 100) y;  //y 被推导成了 double
				decltype(a) b2;		//decltype不同于auto,他可以在变量不初始化的时候就直接定义.
		decltype可以推导结构体和类类型
			例:
				class A{};
				decltype( new A() ) p()
				{
					return new A();
				}
		decltype可以用来推倒函数的返回值类型,如下所示.
	
	9.返回值类型后置表示法
		对于只用decltype来推断模板中函数的返回值类型,有如下方法
			template<typename A.typename B>
			decltype( (*(A*)0)+(*(B*)0) ) add(A a,B b)			//注意此处decltype也可以使用函数来推导返回值
			{
					return a+b;
			}
			或
			template<typename A.typename B>
			decltype( (A)0 + (B)0 ) add(A a,B b)
			{
					return a+b;
			}
		但是这样看上去过于麻烦,因此为了更好的查看代码
		 c++11推出了返回类型后置（trailing-return-type,又称跟踪返回类型）语法,将 decltype 和 auto 结合起来完成返回值类型的推导.
			例:
			template <typename T, typename U>
			auto add(T t, U u) -> decltype(t + u)
			{
				return t + u;
			}
			当然你也可以像这样来推导,虽然看上去非常多余.
			auto add() -> int
			{
				return 1;
			}
	
	10.lambda表达式
		lambda表达式就是一个临时的函数对象
		c++中lambda表达式只是被解析成了一个临时对象 而非一个函数指针,
		例:
			auto p=[=](int x){return x+1;};
			std::cout<<typeid(p).name()<<std::endl;   //输出结果虽然看不懂,但是很明显并不是一个函数指针
										//类型全称为main()::lambda(参数列表)//哪个函数定义的前面就是哪个函数,此处例子lambda表达式定义在main函数
		lambda表达式可以使用类型推导
		基本格式:
			[captrue list] (parameter list) mutable-> return type or exception { function body}
			
			captrue list						捕获列表，必须出现在表达式开始，用于捕获上下文变量；
				
			parameter list						参数列表，非必须，如果没有参数，可以和参数括号一起省略不写;
			
			mutable								mutable修饰，lambda表达式默认为const函数，mutable可以改变函数常量性，如果使用mutable，参数列表不可省略;
			
			->return type or exception			尾置返回类型或异常，对于有明确返回值的函数，可以连同 -> 一起省略不写;
				全要写时候的顺序为[...]mutable throw(...) ->int{...}或
								  [...]mutable throw(...) ->decltype(...){...}
				一个简单的例子:	  auto p=[=](int p)mutable throw(int,char)->decltype(1+1){return p+8;};
				
			function body 						函数体，可以使用参数列表中的参数，还可以使用捕获列表捕获的变量.
			
			
			
			捕获列表
			[captrue list]用于捕获上下文变量，交给表达式函数体使用。
			捕获列表形式	作用
			[=]				按值传递，捕获父域所有变量(包括this指针)
			[&]				传引用，捕获父域所有变量(包括this指针)
			[this]			按值传递，捕获this指针
			[var]			按值传递，捕获变量var
			[&var]			传引用，捕获变量var
			[=,&var]		传引用捕获变量var，按值传递捕获其余所有变量
			[&,var]			按值传递捕获变量var，其余所有变量传引用捕获
			注意：[=,var],[&,&var]的写法不正确，编译器会报错.要么都弄,要么有个例,同理this指针算在=里面
		lambda允许使用返回类型后置
		例	auto p=[=](int x)->int{return x+1};
			auto p=[=](int x)->decltype(1+1){return x+1};

		lambda复制捕获的对象变量在lambda体内为const,不可以随意修改其中内容,但是指针指向的对象可以改变,this指针指向也可以改变,
																									但是是否改变和你在类里面调用的函数是否被const修饰有关
		例:
			A a;
			A *b=new A();
			a.a=9;
			auto p=[=](){
							a.a=6;		//报错
							b->a=6;		//没问题
						};
			
		lambda捕捉的上面出现的变量永远可以使用,不管是引用还是变量,都算存储到了这个lambda临时函数对象里面
		就算你给其他函数调用,使用捕获的变量也不会出错
			例:
					class A{
						public:
							int a;

					};
					template<class T>
					T fun(T t)
					{
						return t;
					}
					template<class T>
					void fun1(T t)
					{
						std::cout<<t()<<std::endl;
					}
					int main()
					{
						int a=8;
						auto p=[=]()->int{return 8+a;};		
						fun1(fun(p));							//套了很多层,还是复制了main中的a变量
					}
		lambda最简模式
			[ 捕获 ] { 函数体 }
			仅当 constexpr、mutable、异常说明、属性或尾随返回类型全都不使用时才能使用此形式。
		
		在捕捉变量时写入捕捉域的复制类型的(=)的变量的大小一定算入lambda表达式的临时对象的大小中(计算大小同类大小的计算)
		但是对于全部捕捉的这种,只有用到的变量才会算入lambda表达式的临时对象大小中
			例
				int a=4;
				char b;
				int c;
				int d;
				auto p=[a,b,c,d]()->int{return 2;};
				std::cout<<sizeof(p)<<std::endl;
				
				auto p1=[=]()->int{return 3;};
				std::cout<<sizeof(p1)<<std::endl;
				
				auto p2=[a,b,c,d]()->int{return a+(int)b+c+d;};
				std::cout<<sizeof(p2)<<std::endl;
			
			p2大小为16但p1,p大小均为类的最小默认值1
			c++引用的原理实质上相当于一个指针所以引用大小和指针是一致的,
			所以lambda表达式同理,传入引用的大小计算同赋值传入但是计算值同当前编译环境下的指针.

		

