operator									//等号重载

extern										//可用于
											//	extern class typename	先放着

static_cast<目标类型>(要转换类型的变量)		//不安全,用于强制隐形转换,对于对象来说,上行转换时安全的,而下行转换时不安全的,因为static_cast的转换是粗暴的,
											//就如同c语言中的 int a=(double)5,可用于no-const和const之间的转换
											//该转换不能用于在不同类型的指针之间互相转换,
											//不能用于整型和指针之间的互相转换,
											//不能用于不同类型的引用之间的转换.
											//但是可以用于类或结构体的指针的向上转换和向下转换
											//static_cast支持类中所有能使用转换函数的转换

dynamic_cast<目标类型>(要转换类型的变量)	//如果转换失败时,则返回NULL,之所以说static_cast在下行转换时不安全,是因为即使转换失败,它也不返回NULL.
											//具有运行时类型检查,因此可以保证下行转换的安全性
											//dynamic_cast专门用于将多态基类(包含虚函数的基类)的指针或引用强制转换为派生类的指针或引用,而且能够检查转换的安全性.
											//对于不安全的指针转换，转换结果返回 NULL 指针.
											//1.dynamic_cast 不能用于将非多态基类(不包含虚函数的基类)的指针或引用强制转换为派生类的指针或引用,但reinterpret_cast可以。
											//2.dynamic_cast对于向下转型,返回null;对于向上转型,会成功,对于没有亲缘关系的类,会抛出异常
											//3.dynamic_cast对于非多态基类(不包含虚函数的基类)使用会出现编译错误.
											//4.dynamic_cast的目标只能是对象间的引用或对象间的指针
												一个例子:A aa=dynamic_cast<A&>(bb);   	//bb为B类,B:pulibc A时,转换成功,B和A无亲缘关系时,抛出异常
																						//有亲缘关系,也会提醒永远无法成功(因为是向下转型)
											
										
reinterpret_cast<目标类型>(要转换类型的变量)	//与上述三种不同,该转换执行的是比特位的复制转换,
												//比如一个int a=4,a的比特位为 30个0 + 10,
												//使用float b=reinterpret_cast<float>(a)后,b的比特位也是30个0 + 10
												//reinterpret_cast会产生一个新的值,这个值会有与原始参数有完全相同的比特位.
												//reinterpret_cast 用于进行各种不同类型的指针之间、不同类型的引用之间以及指针和能容纳指针的整数类型之间的转换

	//对于上述三个转换,C++ 标准不允许将函数指针转换成对象指针
	//
											
const_cast<目标类型>(要转换类型的变量)		//一般用于强制消除对象的常量性

virtual										//定义纯虚函数和虚函数,并且用于虚继承
											纯虚函数定义
											virtual 返回值类型 函数名 (函数参数) = 0;

protected									//声明该函数或变量为受保护访问类型

public										//

private										//声明该变量或函数只能在类的内部访问.
															比如类A有个变量private:int a; 
															则A *a=new A();后 
																a->a会访问失败
															
inline										//声明内联函数,内联函数可以给编译器优化,提高效率(内联函数可以在需要的地方向宏一样展开,而不需要调用函数那样寻址再返回)

													任何在类内部定义的函数都为内联函数(默认加上inline)							//构造和析构还有拷贝等函数都也是
													
													但是在类内声明确在内外定义的函数,除非在类内声明处或类外定义处添加了inline关键字,就不是内联函数		//构造和析构还有拷贝等函数都也是
													
													注意:
														1.内联函数都一般是1-5行的短函数,过于长的函数不要轻易声明为内联函数
														2.内联函数中不能存在任何形式的循环语句,不能存在过多的条件判断语句,函数体不能过于庞大,不能对函数进行取址操作
														3.函数内联后会将函数体会被插入到函数调用的地方,这样很容易使代码膨胀
														4.声明inline关键字后,是可能变为内联函数,而不是一定变为内联函数
											C也可以声明内联函数,原理同C++
																

friend										//声明为有元函数或有元类
		例子:
		
		1.友元类声明
		
		class A{
			friend class B;

		};
		class B{
		};
		B类对象中可以访问A类对象的所有成员函数和变量
		
		2.友元函数声明:
		
		class CDriver
		{
		public:
			void ModifyCar(CCar* pCar);  //改装汽车
		};
		class CCar
		{
		private:
			int price;
			friend int MostExpensiveCar(CCar cars[], int total);  //声明友元
			friend void CDriver::ModifyCar(CCar* pCar);  //声明友元
		};
		上述中成员函数ModifyCar和类外函数MostExpensiveCar可以访问类CCar中所有成员变量和成员函数
		

explicit									//显式方式声明,一般用于构造函数

template									//声明模板类和模板函数
											template<class T,typename T,class T>
											使用typename和class的区别:在定义类模板或是函数模板时是一样的,但是某些时候typename有特殊作用
											另外 模板参数分类型参数和非类型参数
											非类型参数可以使用任何类型,包括引用,指针,函数指针,void类型指针等,还有指针的引用,成员函数指针等
											例子:
											函数模板例子:
											template<typename T, void (*f) (T &v)>
											void foreach(T array[], unsigned size) {
												for (unsigned i = 0; i < size; ++i)
													f(array[i]);
											}
											类模板例子:
											template<char number,class mode>
											class trueA{
												public:
													mode t;
													int a[(int)number];
												public:
													trueA(int p){
														int i;
														for(i=0;i<(int)number;i++)
															this->a[i]=p;
													}

											};
											
											初始化函数模板:
											
											对于上面的类模板例子:
											tureA可以这样new一个对象
											
											trueA<'a',string> *A=new trueA<'a',string>(5);
											
											对于上述函数模板例子
											
											int array[] = {1, 2, 3, 4, 5, 6, 7, 8};
											foreach<int, print<int>>(array, 8);
											
											注意,无论什么时候,用new初始化模板时都要在前面和后面加上类型声明
											
											模板类在声明的时候也要加模板参数
											例:
												template <typename T,class B>class A;
												int a;
												template <typename T,class B>
												class A
												{
													public:
														B b;
														T t;
													A(){}
												};
											


mutable										//声明变量可改变,在const成员函数中也可以使用并改变

noexcept									//C++11 新特性
											  告诉编译器函数中不会发生异常,这有利于编译器对程序做更多的优化。
											  (只是告诉,实际上也可能抛出异常,而且抛出异常之后就会终止程序)
											  相当于函数后面加throw()

constexper									c++11新特性
											
volatile									在多线程中使用,被该关键字标记的变量
												系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据
												

其他
	typeid属于c++关键字,会返回一个type_info类的对象,该类属于c++标准库，name()方法属于type_info类方法
	typeid用来获取变量类型(要包含头文件typeinfo)
	typeid(a).name()       //获取变量a的类型
	当然,这个也可以放类型
	typeid(int).name()
typeid只能识别类型是什么,可以识别出指针,但是对应变量是否为const或static等其并不能识别出来
	
	
	
	
C/C++相关
	restrict									//声明编译器不能通过除该指针以外所有其他直接或者间接方法修改该变量(对象)的内容,
													注意,你要用其他方法修改其实也可以,而且不会报错,这个只是为了提醒编译器,然后可以获得优化
													但是你这样做会导致程序结果不确定
使用方法 int *restrict a=&b;

	restrict例:
	int add(int* __restrict a,int* __restrict b)		//GUN	cc写法
	{
		*a = 5;
		*b = 6;
		return *a+*b;
	}
	若传入的两个参数为同一个变量时,即比如add(&a,&a);
	若两个形参不加restrict修饰
		则返回12
	若两个形参加restrict修饰	
		则返回11		//在编译期就已计算出5+6,加了restrict后把从存储器中取数据那段操作优化了
						//可能根据编译器,优化后结果不一定是这样
	
