<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <!--上述部分加上一个</beans>为spring配置文件的标准文件-->

    <!--.xsd为约束文件扩展名-->
    <!--Spring中java对象被当作bean-->
    <!--下面声明了一个bean，告诉了spring框架需要创建什么对象，
    id相当于给该对象起名，在运行的程序中spring能通过该id找到创建的对象
    class为要创建对象的类型，必须使用全限定类名，而且不可以为接口，只要类名对了且导入了包，都可以创建对象-->

    <!--这里创建了一个MyThing对象(package org.example.impl)-->
    <!--注意一个bean就是一个对象，哪怕他们的class相同(id本来不可以重复)-->
    <bean id="MyClass1" class="org.example.impl.MyThing" />

    <!--下面这个类使用XML的方式来完成MyThingTwo的对象MyClass2的注入-->
    <!--使用set注入-->
    <!--set注入使用property标签完成-->
    <!--
        public class MyThingTwo{
            private String strName;
            private int nId;
            public void setStrName(String out)
            {
                strName=out;
            }
            public void setNId(int out)
            {
                nId=out;
            }
            public String toString()
            {
                return strName+nId;
            }
        }
    -->
    <bean id="MyClass2" class="org.example.impl.MyThingTwo" >
    <!--下面完成基本类型的注入(java中的基本类型为String和其他几个基本类型)-->

        <!--当然，如果类中没有对应属性，但是有对应的 set+property标签中name对应属性名 的方法那么该方法仍然会调用-->
        <!--比如如果MyThingTwo中没有strName与nId这些属性，
        但是有方法setStrName与setNId而且这些方法的参数都只有一个，而且传入value类型可以隐式转换成该参数类型，
        那么这些方法仍会被调用，
        所以可以使用该特性来调用一些功能初始化方法-->
		
		<!--此处给属性值注入无需考虑属性的访问类型，就算是private也可以注入-->
		
        <property name="strName" value="cjh" />
        <property name="nId" value="123456" />
    </bean>

    <!--
    public class MyThingThree {
        MyThing thing;
        int nId;

        public void setThing(MyThing out)
        {
            thing=out;
        }
        public void setNId(int out)
        {
            nId=out;
        }
    }
    -->
    <bean id="MyClass3" class="org.example.impl.MyThingThree">
    <!--下面完成引用类型的注入-->
        <!--此处对于thing变量的赋值依旧调用set函数，但是传入的是我在之前用bean声明的的MyThing对象的Id-->
        <!--也可以使用这种方式来嵌套构建含有引用类型属性的对象(然后该引用类型的属性中还有引用类型属性)，
        该引用的对象在该声明的上面或下面声明都可以-->
        <property name="thing" ref="MyClass2" />
        <property name="nId" value="123456" />

    </bean>


    <!--
	public class MyThingFour {
        MyThingTwo thingTwo;
        int nId;
		public MyThingFour(MyThing outThing,int outNId)
		{
			thing=outThing;
			nId=outNId;
		}
    }
	-->
    <!--下面使用constructor-arg标签来调用类的带参构造来完成对象的注入-->
    <!--
    一个constructor-arg标签表示构造方法的一个参数
    constructor-arg标签的属性：
    name:构造方法中的形参名，
    index：构造方法中的参数的位置，参数位置从左往右0,1,2....来编号，
    value：形参类型如果是简单类型，使用value赋值，
    ref：形参类型如果是引用类型，使用ref赋值，并且ref使用在xml文件中bean所声明的id字符。
    ref指定的对象在该bean之前还是之后声明都可以。
    -->
    <bean id="MyClass4" class="org.example.impl.MyThingFour">
        <!--参数顺序不做要求，但是参数名一定要正确-->
        <constructor-arg name="outNId" value="456789" />
        <constructor-arg name="outThing" ref="MyClass2" />
    </bean>

    <bean id="MyClass42" class="org.example.impl.MyThingFour">
        <!--index可以写或不写，因为有name来对应形参，一般为了观赏性建议写，因为构造方法的参数可以乱序赋值-->
        <constructor-arg index="1" name="outNId" value="888888" />
        <constructor-arg index="0" name="outThing" ref="MyClass2" />
    </bean>

    <!--
    public class MyThingFive {
        MyThingTwo thingTwo;
        int nId;
        public void setNId(int outId)
        {
            nId=outId;
        }

        public String toString()
        {
            return nId+"...."+thingTwo.toString();
        }

        public void setThingTwo(MyThingTwo outTwo)
        {
            thingTwo=outTwo;
        }
    }
    -->
    <!--下面使用byName注入，在bean标签中使用autowire属性并且赋值为byName就使用了byName注入-->
    <bean id="MyClass5" class="org.example.impl.MyThingFive" autowire="byName">
        <!--index可以写或不写，因为有name来对应形参，一般为了观赏性建议写，因为构造方法的参数可以乱序赋值-->

        <!--属性thingTwo的set函数还是必须要有，其原理中还是调用了set函数-->
        <!--
        <property name="thingTwo" ref="MyClass2" />
        -->
        <property name="nId" value="123456" />
    </bean>

    <!--注意byName注入会根据引用类型属性的名字对应xml文件中对应bean的id来进行属性的注入，
    如果下面id名不为thingTwo(大小写必须一致)，则上述的thingTwo属性不能完成注入-->
    <bean id="thingTwo" class="org.example.impl.MyThingTwo">
        <property name="strName" value="cjh_thingTwo" />
        <property name="nId" value="221659" />
    </bean>

</beans>